# Starts counting at 1 because 0 is annoying to type
set -g base-index 1

# Bind prefix-r to reload tmux config
bind r source-file ~/.config/tmux/tmux.conf

# No delay for escape key press
set -sg escape-time 0

# Change prefix from C-b to C-a
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Split window while keeping current directory
bind h split-window -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"

# Not quite sure what this does, but it's good apparently
setw -g aggressive-resize on

# Mouse mode
set -g mouse on

# Enable vi mode
set-window-option -g mode-keys vi

# Begin selection with 'v'
bind -T copy-mode-vi v send -X begin-selection
# Copy the selection to clipboard on drag end
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# Set prefix highlight prompt
set -g @prefix_highlight_prefix_prompt 'Prefix'
set -g @prefix_highlight_fg '#ffffff'
set -g @prefix_highlight_bg '#080808'
# Add prefix highlight to status bar
set -g status-right '#{prefix_highlight} â–Ž %a %Y-%m-%d %H:%M '

# Colours
# Pane divider colours
set -g pane-active-border-style "fg=#80a0ff bg=#080808"
# Status bar colours
set -g status-style "fg=#080808 bg=#80a0ff"
# Surround the zoomed window in brackets and colour it
# https://superuser.com/a/959219
set -g window-status-current-format "#I:#{?window_zoomed_flag,#[fg=#ff3467](,}#W#{?window_zoomed_flag,#[fg=#ff3467]),}*"
set -g window-status-format "#I:#{?window_zoomed_flag,(,}#W#{?window_zoomed_flag,),}"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# tmux.nvim keybindings

# The standard is_vim check that tmux.nvim uses doesn't work well on MacOS because of Crowdstrike.
# See https://github.com/christoomey/vim-tmux-navigator/issues/417 and
# https://github.com/aserowy/tmux.nvim/blob/b2f509311e4cbdc06a93c0da66a8b7b33aa6bec9/tmux.nvim.tmux#L15

# However, on Linux, the MacOS version of the is_vim check doesn't work because for some reason the
# `ps` command can't see the TTYs of processes when tmux runs it. It doesn't even work inside nvim's
# shell execution. This only became an issue when I upgrade to Fish shell v4, but I'm not certain
# that it's the problem.

# I chose to solve this by just using a different is_vim check per OS. However, tmux made this quite
# hard to do. You'd think it would be as easy as conditionally setting is_vim, but variable
# persistence, scoping and environment variables are weird in tmux.

# There's probably a way to use `set -g is_vim` and substitute that into the bind-key commands, but
# I coudln't figure it out.

# Using `set-environment -g` didn't work either as that affects the parent shell's environment, but
# by the time `bind-key` runs, that environment variable isn't available yet. Tmux can get values
# from the environment, but that would make tmux fetch from the shell env every keybind invocation.

# Finally I just settled on using a local variable, just like before, but duplicating the `bind-key`
# commands because the `is_vim` variable is only scoped to the `if-shell` command.

# Basically, fuck Crowdstrike.

if-shell '[[ $(uname) = Linux ]]' {
  is_vim="ps -o state= -o comm= -t '#{pane_tty}' | rg -iq '^[^TXZ ]+ +(\\S+\\/)?g?(view|nvim|fzf)(diff)?$'"
  bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
  bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
  bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
  bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R'}
}

if-shell '[[ $(uname) = Darwin ]]' {
  is_vim="ps -o tty= -o state= -o comm= | rg -iq '^#{s|/dev/||:pane_tty} +[^TXZ ]+ +(\\S+\\/)?g?(view|nvim|fzf)(diff)?$'"
  bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
  bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
  bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
  bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R'}
}

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

# End tmux.nvim

# Install TMUX plugins outside of the config folder
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.local/share/tmux/plugins'

bind C-l send-keys 'C-l'

# Balance panes
bind M-1 select-layout even-horizontal
bind M-2 select-layout even-vertical

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.local/share/tmux/plugins/tpm/tpm'

set -g default-command $SHELL
set -g default-shell $SHELL
